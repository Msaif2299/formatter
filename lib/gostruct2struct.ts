import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import { FunctionParameters } from "@/lib/common";
import { validateGoStruct } from "./godb2createstmt";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function goStruct2Struct(
  goStruct: string,
  conversionParameters: FunctionParameters
): string {
  if (
    conversionParameters.structAVarName === undefined ||
    conversionParameters.structAVarName == ""
  ) {
    throw Error("Struct A cannot be empty");
  }
  if (
    conversionParameters.structBVarName === undefined ||
    conversionParameters.structBVarName == ""
  ) {
    throw Error("Struct B cannot be empty");
  }
  goStruct = goStruct.trim();
  validateGeneralGoStruct(goStruct);
  let splitGoStruct = extractGoStruct(goStruct);
  let output = `func Autogenerated() {\n`;
  splitGoStruct.forEach(
    (value: string, key: string, map: Map<string, string>) => {
      output += `\t${conversionParameters.structAVarName}.${key} = ${conversionParameters.structBVarName}.${key};\n`;
    }
  );
  return output + "}";
}

export function extractGoStruct(goStruct: string): Map<string, string> {
  let output = new Map<string, string>();
  let errors = "";
  goStruct
    .replaceAll("\r", "")
    .replaceAll(/[ ]+/g, " ")
    .replaceAll("\t", " ")
    .replaceAll(/\/\/.*\n/gm, "\n")
    .split("\n")
    .map((value: string, index: number, array: string[]) => {
      if (index == 0 || index == array.length - 1) {
        return;
      }
      let columnSplit = value.split(" ");
      if (columnSplit.length < 2) {
        errors += `Error at Line ${index + 1}, not enough tokens in ${value}\n`;
        return;
      }
      output.set(columnSplit[0], columnSplit[1]);
    });
  return output;
}

export const validateGeneralGoStruct = (data: string) => {
  //non recursive regex, SQL cannot handle nested structs
  if (data.length == 0) {
    throw Error("Struct cannot be empty.");
  }
  const regex =
    /(type)\s+[\w\d]+\s+(struct)\s+\{\s+([\w\d]+\s+(\*|\[\])?[a-zA-Z0-9_\*\[\]]+\s*(`[\w\d]+:"[\w\d\s=,]+"`)?\s*(\/\/.*)?\s+)*\}/gm;
  if (!regex.test(data)) {
    throw Error("Invalid Go Struct");
  }
};
