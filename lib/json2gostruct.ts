import { FunctionParameters, ConvertJSTypeToGolangType } from "@/lib/common";

export const fromGoJSONToGoStruct = (
  json: string,
  conversionParameters: FunctionParameters
) => {
  const data = JSON.parse(json.replace(/(:\s*\[?\s*-?\d*)\.0/g, "$1.1"));
  const tag = conversionParameters.tag;
  if (tag === undefined || tag.length == 0) {
    throw Error("Tag cannot be empty.");
  }
  if (conversionParameters.subTag === undefined) {
    throw Error("Subtag cannot be undefined.");
  }
  return parseJSON(data, tag, conversionParameters.subTag);
};

export const validateGoJSONStruct = (data: string) => {
  // no need to validate, since its already parsing and is fully wrapped in a try catch statement
  if (data.length == 0) {
    throw Error("JSON cannot be empty.");
  }
};

// TODO: handle an array of different objects
function parseJSON(
  data: Record<string, unknown>,
  tag: string,
  subtag: string
): string {
  let result = "type struct Autogenerated {\n";
  if (Array.isArray(data)) {
    result = "type []struct Autogenerated {\n";
  }
  for (const key in data) {
    if (typeof data[key] === "object") {
      result += parseNestedJSON(data[key], key, tag, 1);
      continue;
    }
    if (subtag != "") {
      result +=
        `\t${key} ${ConvertJSTypeToGolangType(data[key])} ` +
        "`" +
        tag +
        ':"' +
        subtag +
        "=" +
        key +
        '"`\n';
    } else {
      result +=
        `\t${key} ${ConvertJSTypeToGolangType(data[key])} ` +
        "`" +
        tag +
        ':"' +
        key +
        '"`\n';
    }
  }
  result += "}";
  return result;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function parseNestedJSON(
  data: any,
  structName: string,
  tag: string,
  level: number
): string {
  const tabDifference = Array(level + 1)
    .fill("\t")
    .join("");
  let result = tabDifference + `${structName} `;
  if (Array.isArray(data)) {
    if (typeof data[0] === "object") {
      result += "[]struct {\n";
      for (const key in data[0]) {
        if (typeof data[0][key] === "object") {
          result += parseNestedJSON(data[0][key], key, tag, level + 1);
          continue;
        }
        result +=
          `\t${tabDifference}${key} ${ConvertJSTypeToGolangType(
            data[0][key]
          )} ` +
          "`" +
          tag +
          ':"' +
          key +
          '"`\n';
      }
    } else {
      return (
        result +
        `[]${ConvertJSTypeToGolangType(data[0])} ` +
        "`" +
        tag +
        ':"' +
        structName +
        '"`\n'
      );
    }
  } else {
    result += "struct {\n";
    for (const key in data) {
      if (typeof data[key] === "object") {
        result += parseNestedJSON(data[key], key, tag, level + 1);
        continue;
      }
      result +=
        `${tabDifference}${key} ${ConvertJSTypeToGolangType(data[key])} ` +
        "`" +
        tag +
        ':"' +
        key +
        '"`\n';
    }
  }
  return result + `${tabDifference}} ` + '`json:"' + structName + '"`\n';
}
